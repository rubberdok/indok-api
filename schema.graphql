"""
This file was automatically generated by 'graphql-codegen'.
Please do not edit this file directly.
To regenerate this file, run `npm run generate:gql`
"""
input AddMemberInput {
  """
  The ID of the organization to add the user to
  """
  organizationId: ID!

  """
  The role of the user in the organization, defaults to Role.MEMBER
  """
  role: Role

  """
  The ID of the user to add to the organization
  """
  userId: ID!
}

type AddMemberResponse {
  member: Member!
}

type Booking {
  cabin: Cabin!
  email: String!
  endDate: DateTime!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
  status: Status!
}

type Cabin {
  externalPrice: Int!
  id: ID!
  internalPrice: Int!
  name: String!
}

input CreateEventInput {
  description: String
  endAt: DateTime
  name: String!
  organizationId: ID!
  slots: [CreateEventSlot!]
  spots: Int
  startAt: DateTime!
}

type CreateEventResponse {
  event: Event!
}

input CreateEventSlot {
  spots: Int!
}

input CreateOrganizationInput {
  """
  The description of the organization, cannot exceed 10 000 characters
  """
  description: String

  """
  The name of the organization, must be unique and between 1 and 100 characters
  """
  name: String!
}

type CreateOrganizationResponse {
  organization: Organization!
}

scalar DateTime

type Event {
  description: String!
  id: ID!
  name: String!
}

input EventInput {
  id: ID!
}

type EventResponse {
  event: Event!
}

type EventsResponse {
  events: [Event!]!
  total: Int!
}

type Member {
  id: ID!

  """
  The organization the member is a member of
  """
  organization: Organization!

  """
  The role of the member in the organization
  """
  role: Role!

  """
  The user that is a member of the organization
  """
  user: User!
}

type Mutation {
  """
  Add a member to the organization
  """
  addMember(data: AddMemberInput!): AddMemberResponse!
  createEvent(data: CreateEventInput!): CreateEventResponse!

  """
  Create a new organization, and add the current user as an admin of the organization.
  """
  createOrganization(data: CreateOrganizationInput!): CreateOrganizationResponse!
  newBooking(data: NewBookingInput!): Booking!

  """
  Remove a member from the organization by the ID of the membership.
  """
  removeMember(data: RemoveMemberInput!): RemoveMemberResponse!
  updateBookingStatus(data: UpdateBookingStatusInput!): Booking!

  """
  Update an organization with the given name and description.
  Passing null or omitting a value will leave the value unchanged.
  """
  updateOrganization(data: UpdateOrganizationInput!): UpdateOrganizationResponse!
  updateUser(data: UpdateUserInput!, id: ID!): User!
}

input NewBookingInput {
  cabinId: ID!
  email: String!
  endDate: DateTime!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
}

type Organization {
  description: String!
  id: ID!

  """
  The members of the organization
  """
  members: [Member!]!
  name: String!
}

type Query {
  event(data: EventInput!): EventResponse!
  events: EventsResponse!
  user: UserResponse!
  users: UsersResponse!
}

input RemoveMemberInput {
  id: ID!
}

type RemoveMemberResponse {
  member: Member!
}

enum Role {
  """
  An admin of the organization, can do everything a member can,
  # and can also manage members in the organization and delete the organization.
  """
  ADMIN

  """
  A member of the organization, can do everything except
  manage members in the organization and delete the organization.
  """
  MEMBER
}

enum Status {
  CANCELLED
  CONFIRMED
  PENDING
  REJECTED
}

input UpdateBookingStatusInput {
  id: ID!
  status: Status!
}

input UpdateOrganizationInput {
  """
  The new description of the organization, cannot exceed 10 000 characters
  Omitting the value or passing null will leave the description unchanged
  """
  description: String

  """
  The ID of the organization to update
  """
  id: ID!

  """
  The new name of the organization
  Omitting the value or passing null will leave the name unchanged
  """
  name: String
}

type UpdateOrganizationResponse {
  organization: Organization!
}

input UpdateUserInput {
  allergies: String
  firstName: String!
  graduationYear: Int
  lastName: String!
  phoneNumber: String
}

type User {
  allergies: String
  canUpdateYear: Boolean!
  createdAt: DateTime!
  firstLogin: Boolean!
  firstName: String!
  graduationYear: Int
  graduationYearUpdatedAt: DateTime
  id: ID!
  lastName: String!
  phoneNumber: String
  username: String!
}

type UserResponse {
  user: User
}

type UsersResponse {
  total: Int!
  users: [User!]!
}
