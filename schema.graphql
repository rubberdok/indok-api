"""
This file was automatically generated by 'graphql-codegen'.
Please do not edit this file directly.
To regenerate this file, run `npm run generate:gql`
"""
input AddMemberInput {
  """
  The ID of the organization to add the user to
  """
  organizationId: ID!

  """
  The role of the user in the organization, defaults to Role.MEMBER
  """
  role: Role

  """
  The ID of the user to add to the organization
  """
  userId: ID!
}

type AddMemberResponse {
  member: Member!
}

type Booking {
  cabin: Cabin!
  email: String!
  endDate: DateTime!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
  status: Status!
}

type BookingContact {
  email: String!
  id: ID!
  name: String!
  phoneNumber: String!
}

type BookingContactResponse {
  bookingContact: BookingContact!
}

type BookingSemester {
  bookingsEnabled: Boolean!
  endAt: DateTime!
  id: ID!
  semester: Semester!
  startAt: DateTime!
}

type BookingSemestersResponse {
  autumn: BookingSemester
  spring: BookingSemester
}

type Cabin {
  capacity: Int!
  externalPrice: Int!
  id: ID!
  internalPrice: Int!
  name: String!
}

type CabinsResponse {
  cabins: [Cabin!]!
}

input CreateEventInput {
  """
  Total capacity for the event, regardless of the capacity in each slot.
  This number takes precedence over the capacity in each slot, so if the remaining capacity on the event is 0
  no more users can be registered as attending.
  """
  capacity: Int

  """
  The description of the event, defaults to "". We support markdown on the client, so this can be markdown.
  This will be displayed to users.
  """
  description: String

  """
  The end time of the event. If this is not provided, the event will be assumed to be two hours long.
  This will be displayed to users.
  """
  endAt: DateTime

  """
  The name of the event, this will be displayed to users
  """
  name: String!

  """
  The organization that is hosting the event. Events must be hosted by an organization, and the user
  creating the event must be a member of the organization.
  """
  organizationId: ID!

  """
  The slots for the event. If this is not provided, but capacity is, then all users can attend the event.
  """
  slots: [CreateEventSlot!]

  """
  The start time of the event. Events must have a start time.
  """
  startAt: DateTime!
}

type CreateEventResponse {
  event: Event!
}

input CreateEventSlot {
  capacity: Int!
}

input CreateListingInput {
  """
  An optional URL to the application form for the listing.
  """
  applicationUrl: String

  """
  At what time the listing will close, will show as a deadline to users, and the listing will be hidden afterwards
  """
  closesAt: DateTime!

  """
  The description of the listing, can be markdown.
  """
  description: String

  """
  The name of the listing, will be visible to users.
  """
  name: String!

  """
  The ID of the organization that the listing belongs to.
  """
  organizationId: ID!
}

type CreateListingResponse {
  listing: Listing!
}

input CreateOrganizationInput {
  """
  The description of the organization, cannot exceed 10 000 characters
  """
  description: String

  """
  Features to enable for the organization. Defaults to an empty list.
  Requires that the current user is a super user, otherwise, this field is ignored.
  """
  featurePermissions: [FeaturePermission!]

  """
  The name of the organization, must be unique and between 1 and 100 characters
  """
  name: String!
}

type CreateOrganizationResponse {
  organization: Organization!
}

scalar DateTime

input DeleteListingInput {
  id: ID!
}

type DeleteListingResponse {
  listing: Listing!
}

type Event {
  """
  The description of the event. We support markdown on the client, so this can be markdown.
  """
  description: String!

  """
  The end time of the event.
  """
  endAt: DateTime!
  id: ID!

  """
  The name of the event.
  """
  name: String!

  """
  The start time of the event.
  """
  startAt: DateTime!
}

input EventInput {
  id: ID!
}

type EventResponse {
  event: Event!
}

input EventsInput {
  """
  If true, only return events that are currently happening, or will happen in the future
  i.e. events where endAt is in the future.
  """
  futureEventsOnly: Boolean
}

type EventsResponse {
  """
  All events, if futureEventsOnly is false, otherwise only future events
  """
  events: [Event!]!

  """
  The events that start next week, by week number
  """
  nextWeek: [Event!]!

  """
  The events that start this week, by week number
  """
  thisWeek: [Event!]!

  """
  The total number of events returned by this query (for now)
  """
  total: Int!

  """
  The events that start in two weeks or later, by week number
  """
  twoWeeksOrLater: [Event!]!
}

enum FeaturePermission {
  ARCHIVE
  CABIN_BOOKING
}

type Listing {
  """
  An optional URL to the application form for the listing, defaults to ""
  """
  applicationUrl: String!

  """
  When the listing closes, i.e. deadline, or when the listing is hidden from view.
  """
  closesAt: DateTime!

  """
  The description of the listing, can be markdown.
  """
  description: String!
  id: ID!

  """
  The name/title of the listing, will be visible to users.
  """
  name: String!

  """
  The organization that the listing belongs to.
  """
  organization: Organization!
}

input ListingInput {
  id: ID!
}

type ListingResponse {
  listing: Listing!
}

type ListingsResponse {
  listings: [Listing!]!
}

type Member {
  id: ID!

  """
  The organization the member is a member of
  """
  organization: Organization!

  """
  The role of the member in the organization
  """
  role: Role!

  """
  The user that is a member of the organization
  """
  user: PublicUser!
}

type Mutation {
  """
  Add a member to the organization
  """
  addMember(data: AddMemberInput!): AddMemberResponse!

  """
  Create an event, requires that the user is logged in, and is a member of the organization that is hosting the event
  """
  createEvent(data: CreateEventInput!): CreateEventResponse!
  createListing(data: CreateListingInput!): CreateListingResponse!

  """
  Create a new organization, and add the current user as an admin of the organization.
  """
  createOrganization(data: CreateOrganizationInput!): CreateOrganizationResponse!
  deleteListing(data: DeleteListingInput!): DeleteListingResponse!
  newBooking(data: NewBookingInput!): NewBookingResponse!

  """
  Remove a member from the organization by the ID of the membership.
  """
  removeMember(data: RemoveMemberInput!): RemoveMemberResponse!

  """
  Retract an active sign up for an event, requires that the user is logged in
  """
  retractSignUp(data: RetractSignUpInput!): RetractSignUpResponse!

  """
  Sign up for an event, requires that the user is logged in
  """
  signUp(data: SignUpInput!): SignUpResponse!

  """
  Update the user with the given ID with super user privileges, requires that
  the caller is an authenticated super user. Otherwise, use updateUser.
  """
  superUpdateUser(data: SuperUpdateUserInput!, id: ID!): SuperUpdateUserResponse!

  """
  Updates the booking contact, requires that the user is in an organization with the CABIN_BOOKING permission.
  """
  updateBookingContact(data: UpdateBookingContactInput!): UpdateBookingContactResponse!

  """
  Updates the booking semester for the given semester, requires that the user is in an organization with
  the CABIN_BOOKING permission.
  """
  updateBookingSemester(data: UpdateBookingSemesterInput!): UpdateBookingSemesterResponse!
  updateBookingStatus(data: UpdateBookingStatusInput!): UpdateBookingResponse!
  updateListing(data: UpdateListingInput!, id: ID!): UpdateListingResponse!

  """
  Update an organization with the given name and description.
  Passing null or omitting a value will leave the value unchanged.
  """
  updateOrganization(data: UpdateOrganizationInput!): UpdateOrganizationResponse!
  updateUser(data: UpdateUserInput!): UpdateUserResponse!
}

input NewBookingInput {
  cabinId: ID!
  email: String!
  endDate: DateTime!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
}

type NewBookingResponse {
  booking: Booking!
}

type Organization {
  description: String!

  """
  The features that are enabled for the organization.
  Changing these fields requires super user permissions.
  """
  featurePermissions: [FeaturePermission!]!
  id: ID!

  """
  The members of the organization
  """
  members: [Member!]!
  name: String!
}

type OrganizationsResponse {
  organizations: [Organization!]!
}

enum ParticipationStatus {
  """
  The user is confirmed to be attending the event
  """
  CONFIRMED

  """
  The user is on the wait list for the event
  """
  ON_WAITLIST

  """
  The user has signed up for the event, and had their sign up removed by an admin
  """
  REMOVED

  """
  The user has signed up for the event, and then retracted their sign up
  """
  RETRACTED
}

"""
PrivateUser should only be used when accessed by the authenticated user themselves
as it contains sensitive information.
"""
type PrivateUser {
  allergies: String

  """
  If the user is permitted to update their graduation year
  """
  canUpdateYear: Boolean!
  createdAt: DateTime!

  """
  Student email
  """
  email: String!
  firstLogin: Boolean!
  firstName: String!

  """
  The users grade year, from 1 - 6(+)
  """
  gradeYear: Int

  """
  Expected graduation year for the user
  """
  graduationYear: Int

  """
  The last time the users graduation year was updated
  """
  graduationYearUpdatedAt: DateTime
  id: ID!

  """
  true if the user is a super user, false otherwise
  """
  isSuperUser: Boolean!
  lastName: String!

  """
  All organizations the user is a member of
  """
  organizations: [Organization!]!
  phoneNumber: String
  username: String!
}

"""
The public facing user type, with limited information.
This type is is available to other users, and should therefore not contain sensitive information,
unless the information is restricted by access control.
"""
type PublicUser {
  """
  The users' given/first name
  """
  firstName: String!

  """
  The users' grade year
  """
  gradeYear: Int
  id: ID!

  """
  The users' family/last name
  """
  lastName: String!

  """
  The users' username
  """
  username: String!
}

type Query {
  bookingContact: BookingContactResponse!
  bookingSemesters: BookingSemestersResponse!
  cabins: CabinsResponse!
  event(data: EventInput!): EventResponse!
  events(data: EventsInput): EventsResponse!
  listing(data: ListingInput!): ListingResponse!
  listings: ListingsResponse!

  """
  Get all organizations
  """
  organizations: OrganizationsResponse
  user: UserResponse!
  users: UsersResponse!
}

input RemoveMemberInput {
  id: ID!
}

type RemoveMemberResponse {
  member: Member!
}

input RetractSignUpInput {
  """
  The event to retract the sign up for
  """
  eventId: ID!
}

type RetractSignUpResponse {
  signUp: SignUp!
}

enum Role {
  """
  An admin of the organization, can do everything a member can,
  # and can also manage members in the organization and delete the organization.
  """
  ADMIN

  """
  A member of the organization, can do everything except
  manage members in the organization and delete the organization.
  """
  MEMBER
}

enum Semester {
  AUTUMN
  SPRING
}

type SignUp {
  """
  The event the user signed up for
  """
  event: Event!
  id: ID!

  """
  The status of the user's participation in the event
  """
  participationStatus: ParticipationStatus!

  """
  The user that signed up for the event
  """
  user: PublicUser!
}

input SignUpInput {
  """
  The event to sign up for
  """
  eventId: ID!
}

type SignUpResponse {
  signUp: SignUp!
}

enum Status {
  CANCELLED
  CONFIRMED
  PENDING
  REJECTED
}

input SuperUpdateUserInput {
  allergies: String
  firstName: String
  graduationYear: Int
  isSuperUser: Boolean
  lastName: String
  phoneNumber: String
}

type SuperUpdateUserResponse {
  user: PrivateUser!
}

input UpdateBookingContactInput {
  """
  The email address of the booking contact, will be publicly available, pass the empty string to remove the email address
  """
  email: String

  """
  The full name of the booking contact, will be publicly available, pass the empty string to remove the name
  """
  name: String

  """
  The phone number of the booking contact, will be publicly available, pass the empty string to remove the phone number
  """
  phoneNumber: String
}

type UpdateBookingContactResponse {
  bookingContact: BookingContact!
}

type UpdateBookingResponse {
  booking: Booking!
}

input UpdateBookingSemesterInput {
  """
  Whether or not bookings are enabled for this semester
  """
  bookingsEnabled: Boolean

  """
  The end date for the booking period
  """
  endAt: DateTime

  """
  There are only ever two semesters, so this is the ID of the semester to update.
  """
  semester: Semester!

  """
  The start date for the booking period
  """
  startAt: DateTime
}

type UpdateBookingSemesterResponse {
  bookingSemester: BookingSemester!
}

input UpdateBookingStatusInput {
  id: ID!
  status: Status!
}

input UpdateListingInput {
  """
  An optional URL to the application form for the listing.
  """
  applicationUrl: String

  """
  At what time the listing will close, will show as a deadline to users, and the listing will be hidden afterwards
  """
  closesAt: DateTime

  """
  The description of the listing, can be markdown.
  """
  description: String

  """
  The name of the listing, will be visible to users.
  """
  name: String
}

type UpdateListingResponse {
  listing: Listing!
}

input UpdateOrganizationInput {
  """
  The new description of the organization, cannot exceed 10 000 characters
  Omitting the value or passing null will leave the description unchanged
  """
  description: String

  """
  Features to enable for the organization.
  Requires that the current user is a super user, otherwise, this field is ignored.
  """
  featurePermissions: [FeaturePermission!]

  """
  The ID of the organization to update
  """
  id: ID!

  """
  The new name of the organization
  Omitting the value or passing null will leave the name unchanged
  """
  name: String
}

type UpdateOrganizationResponse {
  organization: Organization!
}

input UpdateUserInput {
  allergies: String
  firstName: String
  graduationYear: Int
  lastName: String
  phoneNumber: String
}

type UpdateUserResponse {
  user: PrivateUser!
}

type UserResponse {
  user: PrivateUser
}

type UsersResponse {
  super: [PrivateUser!]!
  total: Int!
  users: [PublicUser!]!
}
