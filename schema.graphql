
# This file was automatically generated by 'graphql-codegen'.
# Please do not edit this file directly.
# To update this file, run `npm run generate:gql`

input AddMemberInput {
  organizationId: ID!
  role: Role
  userId: ID!
}

type AddMemberResponse {
  member: Member!
}

type Booking {
  cabin: Cabin!
  email: String!
  endDate: DateTime!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
  status: Status!
}

type Cabin {
  externalPrice: String!
  id: ID!
  internalPrice: String!
  name: String!
}

input CreateOrganizationInput {
  description: String
  name: String!
}

type CreateOrganizationResponse {
  organization: Organization!
}

scalar DateTime

type LogoutResponse {
  status: LogoutStatus!
}

enum LogoutStatus {
  ERROR
  SUCCESS
}

type Member {
  id: ID!
  organization: Organization!
  role: Role!
  user: User!
}

type Mutation {
  addMember(data: AddMemberInput!): AddMemberResponse!
  authenticate(code: String!): UserResponse!
  createOrganization(data: CreateOrganizationInput!): CreateOrganizationResponse!
  createUser(firstName: String!): User
  logout: LogoutResponse!
  newBooking(data: NewBookingInput!): Booking!
  redirectUrl(state: String): RedirectUrlResponse!
  removeMember(data: RemoveMemberInput!): RemoveMemberResponse!
  updateBookingStatus(id: ID!, status: Status!): Booking!
  updateOrganization(data: UpdateOrganizationInput!): UpdateOrganizationResponse!
  updateUser(data: UpdateUserInput!, id: ID!): User!
}

input NewBookingInput {
  cabinId: ID!
  email: String!
  endDate: DateTime!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
}

type Organization {
  description: String!
  id: ID!
  members: [Member!]!
  name: String!
}

type Query {
  user: UserResponse!
  users: UsersResponse!
}

type RedirectUrlResponse {
  url: String!
}

input RemoveMemberByIdInput {
  id: ID!
}

input RemoveMemberByUserIdAndOrganizationIdInput {
  organizationId: ID!
  userId: ID!
}

union RemoveMemberInput = RemoveMemberByIdInput | RemoveMemberByUserIdAndOrganizationIdInput

type RemoveMemberResponse {
  member: Member!
}

enum Role {
  ADMIN
  MEMBER
}

enum Status {
  CANCELLED
  CONFIRMED
  PENDING
  REJECTED
}

input UpdateOrganizationInput {
  description: String
  id: ID!
  name: String
}

type UpdateOrganizationResponse {
  organization: Organization!
}

input UpdateUserInput {
  allergies: String
  firstName: String!
  graduationYear: Int
  lastName: String!
  phoneNumber: String
}

type User {
  allergies: String
  canUpdateYear: Boolean!
  createdAt: String!
  firstLogin: Boolean!
  firstName: String!
  graduationYear: Int
  graduationYearUpdatedAt: DateTime
  id: ID!
  lastName: String!
  phoneNumber: String
  username: String!
}

type UserResponse {
  user: User
}

type UsersResponse {
  total: Int!
  users: [User!]!
}