name: Continuous Integration

on:
  pull_request:
    paths-ignore:
      - infrastructure/**

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test -- --collect-coverage

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/unit
          flags: unittests,node

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Generate GQL types
        run: npm run generate

      - name: Run Lint
        run: npm run lint

  typescript:
    name: Typescript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Run tsc
        run: npm run tsc

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Run Integration Tests
        run: DATABASE_CONNECTION_STRING=postgresql://postgres:postgres@localhost:5432/tests npm run test:integration:headless -- --collect-coverage

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/integration
          flags: integrationtests,node

  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: USERNAME
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Image
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile.prod
          tags: |
            ghcr.io/rubberdok/server:${{ github.sha }}
            ghcr.io/rubberdok/server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
