type Booking {
  cabin: Cabin!
  email: String!
  endDate: DateTime!
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
  status: Status!
}

type Cabin {
  externalPrice: String!
  id: ID!
  internalPrice: String!
  name: String!
}

scalar DateTime

type Mutation {
  authenticate(code: String!): User!
  createUser(firstName: String!): User
  logout: Boolean!
  newBooking(data: NewBookingInput!): Booking!
  redirectUrl(state: String): String!
  updateBookingStatus(id: ID!, status: Status!): Booking!
  updateUser(data: UpdateUserInput!, id: ID!): User!
}

input NewBookingInput {
  cabinId: ID!
  email: String!
  endDate: DateTime!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  startDate: DateTime!
}

type Query {
  user: User
  users: [User!]!
}

enum Status {
  CANCELLED
  CONFIRMED
  PENDING
  REJECTED
}

input UpdateUserInput {
  allergies: String
  firstName: String!
  graduationYear: Int
  lastName: String!
  phoneNumber: String
}

type User {
  allergies: String
  canUpdateYear: Boolean!
  createdAt: String!
  firstLogin: Boolean!
  firstName: String!
  graduationYear: Int
  graduationYearUpdatedAt: DateTime
  id: ID!
  lastName: String!
  phoneNumber: String
  username: String!
}
