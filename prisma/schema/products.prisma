

// E-commerce
model Product {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  description       String   @default("")
  /// The price in Ã¸re
  price             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  merchantId        String   @db.Uuid
  merchant          Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  orders            Order[]
  maxQuantity       Int?
  remainingQuantity Int?
  version           Int      @default(0)
  event             Event[]
}

model Merchant {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @unique
  clientSecret    String
  clientId        String    @unique
  subscriptionKey String
  serialNumber    String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]
}

model Order {
  id                              String             @id @default(uuid()) @db.Uuid
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime           @updatedAt
  userId                          String?            @db.Uuid
  user                            User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  product                         Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId                       String             @db.Uuid
  paymentAttempts                 PaymentAttempt[]
  version                         Int                @default(0)
  paymentStatus                   OrderPaymentStatus @default(PENDING)
  attempt                         Int                @default(0)
  eventSignUp                     EventSignUp?
  totalPrice                      Int                @default(0)
  purchasedAt                     DateTime?
  capturedPaymentAttemptReference String?            @unique
  capturedPaymentAttempt          PaymentAttempt?    @relation(name: "OrderCapturedPaymentAttempt", fields: [capturedPaymentAttemptReference], references: [reference], onDelete: SetNull)
}

enum OrderPaymentStatus {
  PENDING
  CREATED
  CAPTURED
  REFUNDED
  CANCELLED
  RESERVED
}

enum PaymentAttemptState {
  CREATED
  AUTHORIZED
  FAILED
  TERMINATED
  EXPIRED
  ABORTED
}

model PaymentAttempt {
  id              String              @id @default(uuid()) @db.Uuid
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  orderId         String              @db.Uuid
  order           Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  state           PaymentAttemptState @default(CREATED)
  version         Int                 @default(0)
  reference       String              @unique
  capturedByOrder Order?              @relation(name: "OrderCapturedPaymentAttempt")
}
