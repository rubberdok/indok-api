// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_STRING")
}

model GoogleDocument {
  id        String   @id @default(uuid())
  identifer String   @unique
  favorite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                      String        @id @default(uuid())
  feideId                 String        @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  lastLogin               DateTime      @default(now())
  firstLogin              Boolean       @default(true)
  firstName               String
  lastName                String
  email                   String        @unique
  username                String        @unique
  graduationYear          Int?
  graduationYearUpdatedAt DateTime?
  allergies               String        @default("")
  phoneNumber             String        @default("")
  isSuperUser             Boolean       @default(false)
  memberships             Member[]
  Event                   Event[]
  EventSignUp             EventSignUp[]
}

model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events  Event[]
  members Member[]
}

model Event {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  description    String        @default("")
  startAt        DateTime
  endAt          DateTime
  location       String        @default("")
  // If an organization is deleted, we keep the event and set the organizationId to null
  // as it could be related to payments and other stuff.
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?
  organizer      User?         @relation(fields: [organizerId], references: [id], onDelete: SetNull)
  organizerId    String?

  // Versioning for optimistic concurrency control
  version Int  @default(0)
  // Total spots for the event
  spots   Int?

  slots       EventSlot[]
  EventSignUp EventSignUp[]
}

model EventSlot {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  version   Int           @default(0)
  spots     Int
  eventId   String
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  signUps   EventSignUp[]
}

enum ParticipationStatus {
  // The user is attending the event
  CONFIRMED
  // The user is on the waitlist
  ON_WAITLIST
  // The user has retracted their sign up and is no longer attending
  RETRACTED
  // The user has been removed from the event by an admin or by some other external force
  REMOVED
}

model EventSignUp {
  id                  String              @id @default(uuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  version             Int                 @default(0)
  userId              String
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  slot                EventSlot?          @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId              String?
  event               Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId             String
  participationStatus ParticipationStatus @default(CONFIRMED)

  @@index([createdAt])
}

// Cabins
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

model Cabin {
  id            String   @id @default(uuid())
  name          String   @unique
  internalPrice Int
  externalPrice Int
  capacity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Booking {
  id          String        @id @default(uuid())
  email       String
  phoneNumber String
  firstName   String
  lastName    String
  cabinId     String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      BookingStatus @default(PENDING)
}

enum Role {
  ADMIN
  MEMBER
}

model Member {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}
