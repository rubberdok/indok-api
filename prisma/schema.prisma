// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_STRING")
}

model GoogleDocument {
  id        String   @id @default(uuid()) @db.Uuid
  identifer String   @unique
  favorite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                      String        @id @default(uuid()) @db.Uuid
  feideId                 String        @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  lastLogin               DateTime      @default(now())
  firstLogin              Boolean       @default(true)
  firstName               String
  lastName                String
  email                   String        @unique
  username                String        @unique
  graduationYear          Int?
  graduationYearUpdatedAt DateTime?
  allergies               String        @default("")
  phoneNumber             String        @default("")
  isSuperUser             Boolean       @default(false)
  memberships             Member[]
  eventSignUps            EventSignUp[]
  orders                  Order[]
}

model Organization {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events  Event[]
  members Member[]
  Listing Listing[]
}

model Event {
  id             String        @id @default(uuid()) @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String
  description    String        @default("")
  startAt        DateTime
  endAt          DateTime
  location       String        @default("")
  // If an organization is deleted, we keep the event and set the organizationId to null
  // as it could be related to payments and other stuff.
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?       @db.Uuid
  contactEmail   String        @default("")

  // Versioning for optimistic concurrency control
  version           Int  @default(0)
  // Current remaining capacity for the event
  remainingCapacity Int?

  slots   EventSlot[]
  signUps EventSignUp[]
}

model EventSlot {
  id                String        @id @default(uuid()) @db.Uuid
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  version           Int           @default(0)
  remainingCapacity Int
  eventId           String        @db.Uuid
  event             Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  signUps           EventSignUp[]
}

enum ParticipationStatus {
  // The user is attending the event
  CONFIRMED
  // The user is on the waitlist
  ON_WAITLIST
  // The user has retracted their sign up and is no longer attending
  RETRACTED
  // The user has been removed from the event by an admin or by some other external force
  REMOVED
}

model EventSignUp {
  id                  String              @id @default(uuid()) @db.Uuid
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  version             Int                 @default(0)
  userId              String              @db.Uuid
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  slot                EventSlot?          @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId              String?             @db.Uuid
  event               Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId             String              @db.Uuid
  participationStatus ParticipationStatus @default(CONFIRMED)
  active              Boolean             @default(true)

  @@unique([userId, eventId, active])
}

// Cabins
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

model Cabin {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @unique
  internalPrice Int
  externalPrice Int
  capacity      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Booking       Booking[]
}

model Booking {
  id          String        @id @default(uuid()) @db.Uuid
  email       String
  phoneNumber String
  firstName   String
  lastName    String
  cabin       Cabin         @relation(fields: [cabinId], references: [id], onDelete: Cascade)
  cabinId     String        @db.Uuid
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      BookingStatus @default(PENDING)
}

enum Role {
  ADMIN
  MEMBER
}

model Member {
  id             String       @id @default(uuid()) @db.Uuid
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.Uuid
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model Order {
  id             String           @id @default(uuid()) @db.Uuid
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String?          @db.Uuid
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  PaymentAttempt PaymentAttempt[]
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

model PaymentAttempt {
  id        String        @id @default(uuid()) @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  orderId   String        @db.Uuid
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount    Int
  status    PaymentStatus @default(PENDING)
}

model Listing {
  id             String       @id @default(uuid()) @db.Uuid
  name           String       @unique
  description    String       @default("")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.Uuid
  closesAt       DateTime
  applicationUrl String       @default("")
}
