// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
  previewFeatures = ["relationJoins", "nativeDistinct"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_STRING")
}

// Documents
model Document {
  id        String   @id @default(uuid()) @db.Uuid
  /// The display name of the document
  name      String
  fileId    String   @db.Uuid
  /// The document file
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User
model User {
  id                      String        @id @default(uuid()) @db.Uuid
  feideId                 String        @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  lastLogin               DateTime      @default(now())
  firstLogin              Boolean       @default(true)
  firstName               String
  lastName                String
  email                   String        @unique
  username                String        @unique
  graduationYear          Int?
  graduationYearUpdatedAt DateTime?
  allergies               String        @default("")
  phoneNumber             String        @default("")
  isSuperUser             Boolean       @default(false)
  memberships             Member[]
  eventSignUps            EventSignUp[]
  orders                  Order[]
  studyProgram            StudyProgram? @relation(fields: [studyProgramId], references: [id], onDelete: SetNull)
  studyProgramId          String?       @db.Uuid
  files                   File[]
}

model StudyProgram {
  id                 String              @id @default(uuid()) @db.Uuid
  name               String              @unique
  externalId         String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  users              User[]
  featurePermissions FeaturePermission[] @default([])
}

enum EventType {
  /// A regular event without sign ups
  BASIC
  /// A regular event with sign ups
  SIGN_UPS
  /// An event with ticket sales
  TICKETS
}

// Events
model Event {
  id               String        @id @default(uuid()) @db.Uuid
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String
  description      String        @default("")
  shortDescription String        @default("")
  startAt          DateTime
  endAt            DateTime
  location         String        @default("")
  type             EventType     @default(BASIC)
  // If an organization is deleted, we keep the event and set the organizationId to null
  // as it could be related to payments and other stuff.
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId   String?       @db.Uuid
  contactEmail     String        @default("")

  signUpsEnabled                        Boolean   @default(false)
  signUpsStartAt                        DateTime?
  signUpsEndAt                          DateTime?
  signUpsRetractable                    Boolean   @default(false)
  signUpsRequireUserProvidedInformation Boolean   @default(false)

  // Versioning for optimistic concurrency control
  version           Int             @default(0)
  capacity          Int?
  // Current remaining capacity for the event
  remainingCapacity Int?
  categories        EventCategory[]

  slots   EventSlot[]
  signUps EventSignUp[]

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @unique @db.Uuid
}

model EventSlot {
  id                String        @id @default(uuid()) @db.Uuid
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  version           Int           @default(0)
  capacity          Int           @default(0)
  remainingCapacity Int
  eventId           String        @db.Uuid
  event             Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  signUps           EventSignUp[]
  gradeYears        Int[]         @default([1, 2, 3, 4, 5])
}

enum ParticipationStatus {
  // The user is attending the event
  CONFIRMED
  // The user is on the waitlist
  ON_WAITLIST
  // The user has retracted their sign up and is no longer attending
  RETRACTED
  // The user has been removed from the event by an admin or by some other external force
  REMOVED
}

model EventSignUp {
  id                      String   @id @default(uuid()) @db.Uuid
  version                 Int      @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userProvidedInformation String   @default("")

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  slot   EventSlot? @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId String?    @db.Uuid

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @db.Uuid

  participationStatus ParticipationStatus @default(CONFIRMED)
  active              Boolean             @default(true)

  orderId String? @unique @db.Uuid
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@unique([userId, eventId, active])
}

model EventCategory {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  events    Event[]
}

// Cabins
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

model Cabin {
  id                   String    @id @default(uuid()) @db.Uuid
  name                 String
  internalPrice        Int
  internalPriceWeekend Int
  externalPrice        Int
  externalPriceWeekend Int
  capacity             Int
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  bookings             Booking[]
}

model Booking {
  id                        String        @id @default(uuid()) @db.Uuid
  email                     String
  phoneNumber               String
  firstName                 String
  lastName                  String
  startDate                 DateTime
  endDate                   DateTime
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  status                    BookingStatus @default(PENDING)
  cabins                    Cabin[]
  totalCost                 Int
  internalParticipantsCount Int
  externalParticipantsCount Int
  questions                 String        @default("")
  feedback                  String        @default("")
}

enum Semester {
  SPRING
  FALL
}

model BookingSemester {
  id              String   @id @default(uuid()) @db.Uuid
  startAt         DateTime
  endAt           DateTime
  bookingsEnabled Boolean  @default(false)
  semester        Semester @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Organizations, memberships, and permissions
enum Role {
  ADMIN
  MEMBER
}

model Member {
  id             String       @id @default(uuid()) @db.Uuid
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.Uuid
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

enum FeaturePermission {
  ARCHIVE_VIEW_DOCUMENTS
  ARCHIVE_WRITE_DOCUMENTS
  EVENT_WRITE_SIGN_UPS
  CABIN_ADMIN
}

model Organization {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events             Event[]
  members            Member[]
  listings           Listing[]
  featurePermissions FeaturePermission[] @default([])
  logoFileId         String?             @db.Uuid
  logoFile           File?               @relation(fields: [logoFileId], references: [id], onDelete: SetNull)
}

model BookingContact {
  id          String   @id @default("booking-contact")
  name        String   @default("")
  email       String   @default("")
  phoneNumber String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// E-commerce
model Product {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  description       String   @default("")
  /// The price in Ã¸re
  price             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  merchantId        String   @db.Uuid
  merchant          Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  orders            Order[]
  maxQuantity       Int?
  remainingQuantity Int?
  version           Int      @default(0)
  event             Event[]
}

model Merchant {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @unique
  clientSecret    String
  clientId        String    @unique
  subscriptionKey String
  serialNumber    String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]
}

model Order {
  id                              String             @id @default(uuid()) @db.Uuid
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime           @updatedAt
  userId                          String?            @db.Uuid
  user                            User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  product                         Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId                       String             @db.Uuid
  paymentAttempts                 PaymentAttempt[]
  version                         Int                @default(0)
  paymentStatus                   OrderPaymentStatus @default(PENDING)
  attempt                         Int                @default(0)
  eventSignUp                     EventSignUp?
  totalPrice                      Int                @default(0)
  purchasedAt                     DateTime?
  capturedPaymentAttemptReference String?            @unique
  capturedPaymentAttempt          PaymentAttempt?    @relation(name: "OrderCapturedPaymentAttempt", fields: [capturedPaymentAttemptReference], references: [reference], onDelete: SetNull)
}

enum OrderPaymentStatus {
  PENDING
  CREATED
  CAPTURED
  REFUNDED
  CANCELLED
  RESERVED
}

enum PaymentAttemptState {
  CREATED
  AUTHORIZED
  FAILED
  TERMINATED
  EXPIRED
  ABORTED
}

model PaymentAttempt {
  id              String              @id @default(uuid()) @db.Uuid
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  orderId         String              @db.Uuid
  order           Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  state           PaymentAttemptState @default(CREATED)
  version         Int                 @default(0)
  reference       String              @unique
  capturedByOrder Order?              @relation(name: "OrderCapturedPaymentAttempt")
}

// Listings
model Listing {
  id             String       @id @default(uuid()) @db.Uuid
  name           String
  description    String       @default("")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.Uuid
  closesAt       DateTime
  applicationUrl String       @default("")
}

// File storage
model File {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String?        @db.Uuid
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  organizations Organization[]
  Document      Document[]
}
