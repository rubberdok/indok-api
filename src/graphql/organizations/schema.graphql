type Query {
  """
  Get an organization by its ID
  """
  organization(data: OrganizationInput!): OrganizationReseponse!
  """
  Get all organizations
  """
  organizations: OrganizationsResponse!
}

type Mutation {
  """
  Create a new organization, and add the current user as an admin of the organization.
  """
  createOrganization(
    data: CreateOrganizationInput!
  ): CreateOrganizationResponse!

  """
  Update an organization with the given name and description.
  Passing null or omitting a value will leave the value unchanged.
  """
  updateOrganization(
    data: UpdateOrganizationInput!
  ): UpdateOrganizationResponse!

  """
  Add a member to the organization
  """
  addMember(data: AddMemberInput!): AddMemberResponse!

  """
  Remove a member from the organization by the ID of the membership.
  """
  removeMember(data: RemoveMemberInput!): RemoveMemberResponse!

  """
  Change the role of a member in the organization
  """
  updateRole(data: UpdateRoleInput!): UpdateRoleResponse!
}

type Organization {
  id: ID!
  name: String!
  description: String!
  """
  The members of the organization
  """
  members: [Member!]
  """
  The features that are enabled for the organization.
  Changing these fields requires super user permissions.
  """
  featurePermissions: [FeaturePermission!]!
  events: [Event!]!
  listings: [Listing!]!
  logo: RemoteFile
  """
  The primary color (hex) for the organization, for example: #FF0000 for red.
  """
  colorScheme: String
}

type Member {
  id: ID!

  """
  The user that is a member of the organization
  """
  user: PublicUser!

  """
  The organization the member is a member of
  """
  organization: Organization!

  """
  The role of the member in the organization
  """
  role: Role!
}

enum Role {
  """
  An admin of the organization, can do everything a member can,
  # and can also manage members in the organization and delete the organization.
  """
  ADMIN
  """
  A member of the organization, can do everything except
  manage members in the organization and delete the organization.
  """
  MEMBER
}

input UpdateRoleInput {
    """
    The ID of the member to change the role of
    """
    memberId: ID!
    """
    The new role of the member
    """
    role: Role!
}

type UpdateRoleResponse {
    member: Member!
}

input UpdateOrganizationInput {
  """
  The ID of the organization to update
  """
  id: ID!
  """
  The new name of the organization
  Omitting the value or passing null will leave the name unchanged
  """
  name: String
  """
  The new description of the organization, cannot exceed 10 000 characters
  Omitting the value or passing null will leave the description unchanged
  """
  description: String
  """
  Features to enable for the organization.
  Requires that the current user is a super user, otherwise, this field is ignored.
  """
  featurePermissions: [FeaturePermission!]
  logoFileId: ID
  """
  The primary color (hex) for the organization, for example: #FF0000 for red.
  """
  colorScheme: String
}

type UpdateOrganizationResponse {
  organization: Organization!
}

input CreateOrganizationInput {
  """
  The name of the organization, must be unique and between 1 and 100 characters
  """
  name: String!
  """
  The description of the organization, cannot exceed 10 000 characters
  """
  description: String
  """
  Features to enable for the organization. Defaults to an empty list.
  Requires that the current user is a super user, otherwise, this field is ignored.
  """
  featurePermissions: [FeaturePermission!]
  """
  The primary color (hex) for the organization, for example: #FF0000 for red.
  """
  colorScheme: String
}

type CreateOrganizationResponse {
  organization: Organization!
}

input AddMemberInput {
  """
  The ID of the user to add to the organization
  """
  userId: ID
  """
  The email of the user ot add to the organization
  """
  email: String
  """
  The ID of the organization to add the user to
  """
  organizationId: ID!
  """
  The role of the user in the organization, defaults to Role.MEMBER
  """
  role: Role
}

enum AddMemberErrorCode {
  ALREADY_MEMBER
  USER_NOT_FOUND
}

type AddMemberErrorResponse {
  code: AddMemberErrorCode!
  message: String!
}

type AddMemberSuccessResponse {
  member: Member!
}

union AddMemberResponse = AddMemberErrorResponse | AddMemberSuccessResponse

input RemoveMemberInput {
  id: ID!
}

type RemoveMemberResponse {
  member: Member!
}

type OrganizationsResponse {
  organizations: [Organization!]!
}

type OrganizationReseponse {
  organization: Organization!
}

input OrganizationInput {
  id: ID!
}
