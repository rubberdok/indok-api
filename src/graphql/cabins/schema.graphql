input NewBookingInput {
  cabinId: ID!
  startDate: DateTime!
  endDate: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
}

type NewBookingResponse {
  booking: Booking!
}

input UpdateBookingStatusInput {
  id: ID!
  status: Status!
}

type UpdateBookingResponse {
  booking: Booking!
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

type CabinsResponse {
  cabins: [Cabin!]!
}

type Query {
  cabins: CabinsResponse!
}

type Mutation {
  newBooking(data: NewBookingInput!): NewBookingResponse!
  updateBookingStatus(data: UpdateBookingStatusInput!): UpdateBookingResponse!
}

type Cabin {
  id: ID!
  name: String!
  internalPrice: Int!
  externalPrice: Int!
  capacity: Int!
}

type Booking {
  id: ID!
  endDate: DateTime!
  startDate: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  cabin: Cabin!
  status: Status!
}
