input InitiatePaymentAttemptInput {
    """
    The ID of the order to initiate a payment attempt for.
    """
    orderId: ID!
}

type InitiatePaymentAttemptResponse {
    """
    The URL to redirect the user to in order to complete the payment.
    """
    redirectUrl: String!
}

enum OrderPaymentStatus {
    PENDING
    CREATED
    CAPTURED
    REFUNDED
    CANCELLED
    RESERVED
}

type Order {
    id: ID!
    product: Product!
    user: PrivateUser
    attempt: Int!
    paymentStatus: OrderPaymentStatus!
}

input CreateOrderInput {
    """
    The ID of the product to create an order for.
    """
    productId: ID!
}

type CreateOrderResponse {
    order: Order!
}

type Product {
    id: ID!
    """
    price in Ã¸re, i.e. 100 = 1 NOK
    """
    price: Price!
}

type Price {
    """
    The value of the price, in the given unit.
    """
    value: Int!
    """
    The unit of the price, e.g. NOK, USD, EUR, etc.
    """
    unit: String!
}

type Merchant {
    id: ID!
    name: String!
}

input CreateMerchantInput {
    """
    The name of the merchant to create.
    """
    name: String!
    """
    Client ID for the merchant, retrieved from the payment provider.
    """
    clientId: String!
    """
    Client secret for the merchant, retrieved from the payment provider.
    """
    clientSecret: String!
    """
    Merchant serial number for the merchant, retrieved from the payment provider.
    """
    serialNumber: String!
    """
    Subscription key for the merchant, retrieved from the payment provider.
    """
    subscriptionKey: String!
}

type CreateMerchantResponse {
    """
    The merchant that was created.
    """
    merchant: Merchant!
}

type ProductResponse {
    products: [Product!]!
    total: Int!
}

type OrdersResponse {
    orders: [Order!]!
    total: Int!
}

enum PaymentAttemptState {
    CREATED
    AUTHORIZED
    FAILED
    TERMINATED
    EXPIRED
    ABORTED
}

type PaymentAttempt {
    id: ID!
    reference: String!
    inProgress: Boolean!
    state: PaymentAttemptState!
    order: Order!

}

type PaymentAttemptsResponse {
    paymentAttempts: [PaymentAttempt!]!
    total: Int!
}

input OrdersInput {
    userId: ID
    productId: ID
}

input PaymentAttemptsInput {
    userId: ID
    orderId: ID
    productId: ID
}

type Mutation {
    """
    Initiates a payment attempt for the given order.
    """
    initiatePaymentAttempt(data: InitiatePaymentAttemptInput!): InitiatePaymentAttemptResponse!
    """
    Creates an order for the given product.
    """
    createOrder(data: CreateOrderInput!): CreateOrderResponse!
    """
    Create a new Vipps merchant, and return the created merchant.
    Requires super user status.
    """
    createMerchant(data: CreateMerchantInput!): CreateMerchantResponse!
}


type Query {
    products: ProductResponse!
    orders(data: OrdersInput): OrdersResponse!
    paymentAttempts(data: PaymentAttemptsInput): PaymentAttemptsResponse!
}