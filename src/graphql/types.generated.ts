import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { BookingMapper } from './cabins/schema.mappers.js';
import { EventMapper, EventsResponseMapper, SignUpMapper } from './events/schema.mappers.js';
import { ListingMapper } from './listings/schema.mappers.js';
import { MemberMapper, OrganizationMapper } from './organizations/schema.mappers.js';
import { PrivateUserMapper, PublicUserMapper, UsersResponseMapper } from './users/schema.mappers.js';
import { ApolloContext } from '@/lib/apollo-server.js';
export type Maybe<T> = T | null | undefined;
export type InputMaybe<T> = T | null | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };

/* eslint-disable */
/* prettier-ignore */

/**
 * This file was automatically generated by 'graphql-codegen'.
 * Please do not edit this file directly.
 * To regenerate this file, run `pnpm generate:gql`
 */

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string | number; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: Date | string; output: Date | string; }
};

export type AddMemberInput = {
  /** The ID of the organization to add the user to */
  organizationId: Scalars['ID']['input'];
  /** The role of the user in the organization, defaults to Role.MEMBER */
  role?: InputMaybe<Role>;
  /** The ID of the user to add to the organization */
  userId: Scalars['ID']['input'];
};

export type AddMemberResponse = {
  __typename?: 'AddMemberResponse';
  member: Member;
};

export type Booking = {
  __typename?: 'Booking';
  cabin: Cabin;
  email: Scalars['String']['output'];
  endDate: Scalars['DateTime']['output'];
  firstName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  phoneNumber: Scalars['String']['output'];
  startDate: Scalars['DateTime']['output'];
  status: Status;
};

export type Cabin = {
  __typename?: 'Cabin';
  externalPrice: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  internalPrice: Scalars['Int']['output'];
  name: Scalars['String']['output'];
};

export type CreateEventInput = {
  /**
   * Total capacity for the event, regardless of the capacity in each slot.
   * This number takes precedence over the capacity in each slot, so if the remaining capacity on the event is 0
   * no more users can be registered as attending.
   */
  capacity?: InputMaybe<Scalars['Int']['input']>;
  /**
   * The description of the event, defaults to "". We support markdown on the client, so this can be markdown.
   * This will be displayed to users.
   */
  description?: InputMaybe<Scalars['String']['input']>;
  /**
   * The end time of the event. If this is not provided, the event will be assumed to be two hours long.
   * This will be displayed to users.
   */
  endAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** The name of the event, this will be displayed to users */
  name: Scalars['String']['input'];
  /**
   * The organization that is hosting the event. Events must be hosted by an organization, and the user
   * creating the event must be a member of the organization.
   */
  organizationId: Scalars['ID']['input'];
  /** The slots for the event. If this is not provided, but capacity is, then all users can attend the event. */
  slots?: InputMaybe<Array<CreateEventSlot>>;
  /** The start time of the event. Events must have a start time. */
  startAt: Scalars['DateTime']['input'];
};

export type CreateEventResponse = {
  __typename?: 'CreateEventResponse';
  event: Event;
};

export type CreateEventSlot = {
  capacity: Scalars['Int']['input'];
};

export type CreateListingInput = {
  /** An optional URL to the application form for the listing. */
  applicationUrl?: InputMaybe<Scalars['String']['input']>;
  /** At what time the listing will close, will show as a deadline to users, and the listing will be hidden afterwards */
  closesAt: Scalars['DateTime']['input'];
  /** The description of the listing, can be markdown. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the listing, will be visible to users. */
  name: Scalars['String']['input'];
  /** The ID of the organization that the listing belongs to. */
  organizationId: Scalars['ID']['input'];
};

export type CreateListingResponse = {
  __typename?: 'CreateListingResponse';
  listing: Listing;
};

export type CreateOrganizationInput = {
  /** The description of the organization, cannot exceed 10 000 characters */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the organization, must be unique and between 1 and 100 characters */
  name: Scalars['String']['input'];
};

export type CreateOrganizationResponse = {
  __typename?: 'CreateOrganizationResponse';
  organization: Organization;
};

export type DeleteListingInput = {
  id: Scalars['ID']['input'];
};

export type DeleteListingResponse = {
  __typename?: 'DeleteListingResponse';
  listing: Listing;
};

export type Event = {
  __typename?: 'Event';
  /** The description of the event. We support markdown on the client, so this can be markdown. */
  description: Scalars['String']['output'];
  /** The end time of the event. */
  endAt: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  /** The name of the event. */
  name: Scalars['String']['output'];
  /** The start time of the event. */
  startAt: Scalars['DateTime']['output'];
};

export type EventInput = {
  id: Scalars['ID']['input'];
};

export type EventResponse = {
  __typename?: 'EventResponse';
  event: Event;
};

export type EventsInput = {
  /**
   * If true, only return events that are currently happening, or will happen in the future
   * i.e. events where endAt is in the future.
   */
  futureEventsOnly?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EventsResponse = {
  __typename?: 'EventsResponse';
  /** All events, if futureEventsOnly is false, otherwise only future events */
  events: Array<Event>;
  /** The events that start next week, by week number */
  nextWeek: Array<Event>;
  /** The events that start this week, by week number */
  thisWeek: Array<Event>;
  /** The total number of events returned by this query (for now) */
  total: Scalars['Int']['output'];
  /** The events that start in two weeks or later, by week number */
  twoWeeksOrLater: Array<Event>;
};

export type Listing = {
  __typename?: 'Listing';
  closesAt: Scalars['DateTime']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  organization: Organization;
};

export type ListingInput = {
  id: Scalars['ID']['input'];
};

export type ListingResponse = {
  __typename?: 'ListingResponse';
  listing: Listing;
};

export type ListingsResponse = {
  __typename?: 'ListingsResponse';
  listings: Array<Listing>;
};

export type Member = {
  __typename?: 'Member';
  id: Scalars['ID']['output'];
  /** The organization the member is a member of */
  organization: Organization;
  /** The role of the member in the organization */
  role: Role;
  /** The user that is a member of the organization */
  user: PublicUser;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Add a member to the organization */
  addMember: AddMemberResponse;
  /** Create an event, requires that the user is logged in, and is a member of the organization that is hosting the event */
  createEvent: CreateEventResponse;
  createListing: CreateListingResponse;
  /** Create a new organization, and add the current user as an admin of the organization. */
  createOrganization: CreateOrganizationResponse;
  deleteListing: DeleteListingResponse;
  newBooking: Booking;
  /** Remove a member from the organization by the ID of the membership. */
  removeMember: RemoveMemberResponse;
  /** Retract an active sign up for an event, requires that the user is logged in */
  retractSignUp: RetractSignUpResponse;
  /** Sign up for an event, requires that the user is logged in */
  signUp: SignUpResponse;
  updateBookingStatus: Booking;
  updateListing: UpdateListingResponse;
  /**
   * Update an organization with the given name and description.
   * Passing null or omitting a value will leave the value unchanged.
   */
  updateOrganization: UpdateOrganizationResponse;
  updateUser: UpdateUserResponse;
};


export type MutationaddMemberArgs = {
  data: AddMemberInput;
};


export type MutationcreateEventArgs = {
  data: CreateEventInput;
};


export type MutationcreateListingArgs = {
  data: CreateListingInput;
};


export type MutationcreateOrganizationArgs = {
  data: CreateOrganizationInput;
};


export type MutationdeleteListingArgs = {
  data: DeleteListingInput;
};


export type MutationnewBookingArgs = {
  data: NewBookingInput;
};


export type MutationremoveMemberArgs = {
  data: RemoveMemberInput;
};


export type MutationretractSignUpArgs = {
  data: RetractSignUpInput;
};


export type MutationsignUpArgs = {
  data: SignUpInput;
};


export type MutationupdateBookingStatusArgs = {
  data: UpdateBookingStatusInput;
};


export type MutationupdateListingArgs = {
  data: UpdateListingInput;
  id: Scalars['ID']['input'];
};


export type MutationupdateOrganizationArgs = {
  data: UpdateOrganizationInput;
};


export type MutationupdateUserArgs = {
  data: UpdateUserInput;
};

export type NewBookingInput = {
  cabinId: Scalars['ID']['input'];
  email: Scalars['String']['input'];
  endDate: Scalars['DateTime']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  phoneNumber: Scalars['String']['input'];
  startDate: Scalars['DateTime']['input'];
};

export type Organization = {
  __typename?: 'Organization';
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  /** The members of the organization */
  members: Array<Member>;
  name: Scalars['String']['output'];
};

export type ParticipationStatus =
  /** The user is confirmed to be attending the event */
  | 'CONFIRMED'
  /** The user is on the wait list for the event */
  | 'ON_WAITLIST'
  /** The user has signed up for the event, and had their sign up removed by an admin */
  | 'REMOVED'
  /** The user has signed up for the event, and then retracted their sign up */
  | 'RETRACTED';

/**
 * PrivateUser should only be used when accessed by the authenticated user themselves
 * as it contains sensitive information.
 */
export type PrivateUser = {
  __typename?: 'PrivateUser';
  allergies?: Maybe<Scalars['String']['output']>;
  /** If the user is permitted to update their graduation year */
  canUpdateYear: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  /** Student email */
  email: Scalars['String']['output'];
  firstLogin: Scalars['Boolean']['output'];
  firstName: Scalars['String']['output'];
  /** The users grade year, from 1 - 6(+) */
  gradeYear?: Maybe<Scalars['Int']['output']>;
  /** Expected graduation year for the user */
  graduationYear?: Maybe<Scalars['Int']['output']>;
  /** The last time the users graduation year was updated */
  graduationYearUpdatedAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  lastName: Scalars['String']['output'];
  /** All organizations the user is a member of */
  organizations: Array<Organization>;
  phoneNumber?: Maybe<Scalars['String']['output']>;
  username: Scalars['String']['output'];
};

/**
 * The public facing user type, with limited information.
 * This type is is available to other users, and should therefore not contain sensitive information,
 * unless the information is restricted by access control.
 */
export type PublicUser = {
  __typename?: 'PublicUser';
  /** The users' given/first name */
  firstName: Scalars['String']['output'];
  /** The users' grade year */
  gradeYear?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  /** The users' family/last name */
  lastName: Scalars['String']['output'];
  /** The users' username */
  username: Scalars['String']['output'];
};

export type Query = {
  __typename?: 'Query';
  event: EventResponse;
  events: EventsResponse;
  listing: ListingResponse;
  listings: ListingsResponse;
  user: UserResponse;
  users: UsersResponse;
};


export type QueryeventArgs = {
  data: EventInput;
};


export type QueryeventsArgs = {
  data?: InputMaybe<EventsInput>;
};


export type QuerylistingArgs = {
  data: ListingInput;
};

export type RemoveMemberInput = {
  id: Scalars['ID']['input'];
};

export type RemoveMemberResponse = {
  __typename?: 'RemoveMemberResponse';
  member: Member;
};

export type RetractSignUpInput = {
  /** The event to retract the sign up for */
  eventId: Scalars['ID']['input'];
};

export type RetractSignUpResponse = {
  __typename?: 'RetractSignUpResponse';
  signUp: SignUp;
};

export type Role =
  /**
   * An admin of the organization, can do everything a member can,
   * # and can also manage members in the organization and delete the organization.
   */
  | 'ADMIN'
  /**
   * A member of the organization, can do everything except
   * manage members in the organization and delete the organization.
   */
  | 'MEMBER';

export type SignUp = {
  __typename?: 'SignUp';
  /** The event the user signed up for */
  event: Event;
  id: Scalars['ID']['output'];
  /** The status of the user's participation in the event */
  participationStatus: ParticipationStatus;
  /** The user that signed up for the event */
  user: PublicUser;
};

export type SignUpInput = {
  /** The event to sign up for */
  eventId: Scalars['ID']['input'];
};

export type SignUpResponse = {
  __typename?: 'SignUpResponse';
  signUp: SignUp;
};

export type Status =
  | 'CANCELLED'
  | 'CONFIRMED'
  | 'PENDING'
  | 'REJECTED';

export type UpdateBookingStatusInput = {
  id: Scalars['ID']['input'];
  status: Status;
};

export type UpdateListingInput = {
  /** An optional URL to the application form for the listing. */
  applicationUrl?: InputMaybe<Scalars['String']['input']>;
  /** At what time the listing will close, will show as a deadline to users, and the listing will be hidden afterwards */
  closesAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** The description of the listing, can be markdown. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The name of the listing, will be visible to users. */
  name?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateListingResponse = {
  __typename?: 'UpdateListingResponse';
  listing: Listing;
};

export type UpdateOrganizationInput = {
  /**
   * The new description of the organization, cannot exceed 10 000 characters
   * Omitting the value or passing null will leave the description unchanged
   */
  description?: InputMaybe<Scalars['String']['input']>;
  /** The ID of the organization to update */
  id: Scalars['ID']['input'];
  /**
   * The new name of the organization
   * Omitting the value or passing null will leave the name unchanged
   */
  name?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateOrganizationResponse = {
  __typename?: 'UpdateOrganizationResponse';
  organization: Organization;
};

export type UpdateUserInput = {
  allergies?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  graduationYear?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  phoneNumber?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateUserResponse = {
  __typename?: 'UpdateUserResponse';
  user: PrivateUser;
};

export type UserResponse = {
  __typename?: 'UserResponse';
  user?: Maybe<PrivateUser>;
};

export type UsersResponse = {
  __typename?: 'UsersResponse';
  total: Scalars['Int']['output'];
  users: Array<PrivateUser>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;



/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  AddMemberInput: AddMemberInput;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  AddMemberResponse: ResolverTypeWrapper<Omit<AddMemberResponse, 'member'> & { member: ResolversTypes['Member'] }>;
  Booking: ResolverTypeWrapper<BookingMapper>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  Cabin: ResolverTypeWrapper<Cabin>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  CreateEventInput: CreateEventInput;
  CreateEventResponse: ResolverTypeWrapper<Omit<CreateEventResponse, 'event'> & { event: ResolversTypes['Event'] }>;
  CreateEventSlot: CreateEventSlot;
  CreateListingInput: CreateListingInput;
  CreateListingResponse: ResolverTypeWrapper<Omit<CreateListingResponse, 'listing'> & { listing: ResolversTypes['Listing'] }>;
  CreateOrganizationInput: CreateOrganizationInput;
  CreateOrganizationResponse: ResolverTypeWrapper<Omit<CreateOrganizationResponse, 'organization'> & { organization: ResolversTypes['Organization'] }>;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']['output']>;
  DeleteListingInput: DeleteListingInput;
  DeleteListingResponse: ResolverTypeWrapper<Omit<DeleteListingResponse, 'listing'> & { listing: ResolversTypes['Listing'] }>;
  Event: ResolverTypeWrapper<EventMapper>;
  EventInput: EventInput;
  EventResponse: ResolverTypeWrapper<Omit<EventResponse, 'event'> & { event: ResolversTypes['Event'] }>;
  EventsInput: EventsInput;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  EventsResponse: ResolverTypeWrapper<EventsResponseMapper>;
  Listing: ResolverTypeWrapper<ListingMapper>;
  ListingInput: ListingInput;
  ListingResponse: ResolverTypeWrapper<Omit<ListingResponse, 'listing'> & { listing: ResolversTypes['Listing'] }>;
  ListingsResponse: ResolverTypeWrapper<Omit<ListingsResponse, 'listings'> & { listings: Array<ResolversTypes['Listing']> }>;
  Member: ResolverTypeWrapper<MemberMapper>;
  Mutation: ResolverTypeWrapper<{}>;
  NewBookingInput: NewBookingInput;
  Organization: ResolverTypeWrapper<OrganizationMapper>;
  ParticipationStatus: ParticipationStatus;
  PrivateUser: ResolverTypeWrapper<PrivateUserMapper>;
  PublicUser: ResolverTypeWrapper<PublicUserMapper>;
  Query: ResolverTypeWrapper<{}>;
  RemoveMemberInput: RemoveMemberInput;
  RemoveMemberResponse: ResolverTypeWrapper<Omit<RemoveMemberResponse, 'member'> & { member: ResolversTypes['Member'] }>;
  RetractSignUpInput: RetractSignUpInput;
  RetractSignUpResponse: ResolverTypeWrapper<Omit<RetractSignUpResponse, 'signUp'> & { signUp: ResolversTypes['SignUp'] }>;
  Role: Role;
  SignUp: ResolverTypeWrapper<SignUpMapper>;
  SignUpInput: SignUpInput;
  SignUpResponse: ResolverTypeWrapper<Omit<SignUpResponse, 'signUp'> & { signUp: ResolversTypes['SignUp'] }>;
  Status: Status;
  UpdateBookingStatusInput: UpdateBookingStatusInput;
  UpdateListingInput: UpdateListingInput;
  UpdateListingResponse: ResolverTypeWrapper<Omit<UpdateListingResponse, 'listing'> & { listing: ResolversTypes['Listing'] }>;
  UpdateOrganizationInput: UpdateOrganizationInput;
  UpdateOrganizationResponse: ResolverTypeWrapper<Omit<UpdateOrganizationResponse, 'organization'> & { organization: ResolversTypes['Organization'] }>;
  UpdateUserInput: UpdateUserInput;
  UpdateUserResponse: ResolverTypeWrapper<Omit<UpdateUserResponse, 'user'> & { user: ResolversTypes['PrivateUser'] }>;
  UserResponse: ResolverTypeWrapper<Omit<UserResponse, 'user'> & { user?: Maybe<ResolversTypes['PrivateUser']> }>;
  UsersResponse: ResolverTypeWrapper<UsersResponseMapper>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  AddMemberInput: AddMemberInput;
  ID: Scalars['ID']['output'];
  AddMemberResponse: Omit<AddMemberResponse, 'member'> & { member: ResolversParentTypes['Member'] };
  Booking: BookingMapper;
  String: Scalars['String']['output'];
  Cabin: Cabin;
  Int: Scalars['Int']['output'];
  CreateEventInput: CreateEventInput;
  CreateEventResponse: Omit<CreateEventResponse, 'event'> & { event: ResolversParentTypes['Event'] };
  CreateEventSlot: CreateEventSlot;
  CreateListingInput: CreateListingInput;
  CreateListingResponse: Omit<CreateListingResponse, 'listing'> & { listing: ResolversParentTypes['Listing'] };
  CreateOrganizationInput: CreateOrganizationInput;
  CreateOrganizationResponse: Omit<CreateOrganizationResponse, 'organization'> & { organization: ResolversParentTypes['Organization'] };
  DateTime: Scalars['DateTime']['output'];
  DeleteListingInput: DeleteListingInput;
  DeleteListingResponse: Omit<DeleteListingResponse, 'listing'> & { listing: ResolversParentTypes['Listing'] };
  Event: EventMapper;
  EventInput: EventInput;
  EventResponse: Omit<EventResponse, 'event'> & { event: ResolversParentTypes['Event'] };
  EventsInput: EventsInput;
  Boolean: Scalars['Boolean']['output'];
  EventsResponse: EventsResponseMapper;
  Listing: ListingMapper;
  ListingInput: ListingInput;
  ListingResponse: Omit<ListingResponse, 'listing'> & { listing: ResolversParentTypes['Listing'] };
  ListingsResponse: Omit<ListingsResponse, 'listings'> & { listings: Array<ResolversParentTypes['Listing']> };
  Member: MemberMapper;
  Mutation: {};
  NewBookingInput: NewBookingInput;
  Organization: OrganizationMapper;
  PrivateUser: PrivateUserMapper;
  PublicUser: PublicUserMapper;
  Query: {};
  RemoveMemberInput: RemoveMemberInput;
  RemoveMemberResponse: Omit<RemoveMemberResponse, 'member'> & { member: ResolversParentTypes['Member'] };
  RetractSignUpInput: RetractSignUpInput;
  RetractSignUpResponse: Omit<RetractSignUpResponse, 'signUp'> & { signUp: ResolversParentTypes['SignUp'] };
  SignUp: SignUpMapper;
  SignUpInput: SignUpInput;
  SignUpResponse: Omit<SignUpResponse, 'signUp'> & { signUp: ResolversParentTypes['SignUp'] };
  UpdateBookingStatusInput: UpdateBookingStatusInput;
  UpdateListingInput: UpdateListingInput;
  UpdateListingResponse: Omit<UpdateListingResponse, 'listing'> & { listing: ResolversParentTypes['Listing'] };
  UpdateOrganizationInput: UpdateOrganizationInput;
  UpdateOrganizationResponse: Omit<UpdateOrganizationResponse, 'organization'> & { organization: ResolversParentTypes['Organization'] };
  UpdateUserInput: UpdateUserInput;
  UpdateUserResponse: Omit<UpdateUserResponse, 'user'> & { user: ResolversParentTypes['PrivateUser'] };
  UserResponse: Omit<UserResponse, 'user'> & { user?: Maybe<ResolversParentTypes['PrivateUser']> };
  UsersResponse: UsersResponseMapper;
};

export type AddMemberResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['AddMemberResponse'] = ResolversParentTypes['AddMemberResponse']> = {
  member?: Resolver<ResolversTypes['Member'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BookingResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Booking'] = ResolversParentTypes['Booking']> = {
  cabin?: Resolver<ResolversTypes['Cabin'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CabinResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Cabin'] = ResolversParentTypes['Cabin']> = {
  externalPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  internalPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateEventResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['CreateEventResponse'] = ResolversParentTypes['CreateEventResponse']> = {
  event?: Resolver<ResolversTypes['Event'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateListingResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['CreateListingResponse'] = ResolversParentTypes['CreateListingResponse']> = {
  listing?: Resolver<ResolversTypes['Listing'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateOrganizationResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['CreateOrganizationResponse'] = ResolversParentTypes['CreateOrganizationResponse']> = {
  organization?: Resolver<ResolversTypes['Organization'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DeleteListingResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['DeleteListingResponse'] = ResolversParentTypes['DeleteListingResponse']> = {
  listing?: Resolver<ResolversTypes['Listing'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EventResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Event'] = ResolversParentTypes['Event']> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  endAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  startAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EventResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['EventResponse'] = ResolversParentTypes['EventResponse']> = {
  event?: Resolver<ResolversTypes['Event'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EventsResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['EventsResponse'] = ResolversParentTypes['EventsResponse']> = {
  events?: Resolver<Array<ResolversTypes['Event']>, ParentType, ContextType>;
  nextWeek?: Resolver<Array<ResolversTypes['Event']>, ParentType, ContextType>;
  thisWeek?: Resolver<Array<ResolversTypes['Event']>, ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  twoWeeksOrLater?: Resolver<Array<ResolversTypes['Event']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ListingResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Listing'] = ResolversParentTypes['Listing']> = {
  closesAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  organization?: Resolver<ResolversTypes['Organization'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ListingResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['ListingResponse'] = ResolversParentTypes['ListingResponse']> = {
  listing?: Resolver<ResolversTypes['Listing'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ListingsResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['ListingsResponse'] = ResolversParentTypes['ListingsResponse']> = {
  listings?: Resolver<Array<ResolversTypes['Listing']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MemberResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Member'] = ResolversParentTypes['Member']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  organization?: Resolver<ResolversTypes['Organization'], ParentType, ContextType>;
  role?: Resolver<ResolversTypes['Role'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['PublicUser'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  addMember?: Resolver<ResolversTypes['AddMemberResponse'], ParentType, ContextType, RequireFields<MutationaddMemberArgs, 'data'>>;
  createEvent?: Resolver<ResolversTypes['CreateEventResponse'], ParentType, ContextType, RequireFields<MutationcreateEventArgs, 'data'>>;
  createListing?: Resolver<ResolversTypes['CreateListingResponse'], ParentType, ContextType, RequireFields<MutationcreateListingArgs, 'data'>>;
  createOrganization?: Resolver<ResolversTypes['CreateOrganizationResponse'], ParentType, ContextType, RequireFields<MutationcreateOrganizationArgs, 'data'>>;
  deleteListing?: Resolver<ResolversTypes['DeleteListingResponse'], ParentType, ContextType, RequireFields<MutationdeleteListingArgs, 'data'>>;
  newBooking?: Resolver<ResolversTypes['Booking'], ParentType, ContextType, RequireFields<MutationnewBookingArgs, 'data'>>;
  removeMember?: Resolver<ResolversTypes['RemoveMemberResponse'], ParentType, ContextType, RequireFields<MutationremoveMemberArgs, 'data'>>;
  retractSignUp?: Resolver<ResolversTypes['RetractSignUpResponse'], ParentType, ContextType, RequireFields<MutationretractSignUpArgs, 'data'>>;
  signUp?: Resolver<ResolversTypes['SignUpResponse'], ParentType, ContextType, RequireFields<MutationsignUpArgs, 'data'>>;
  updateBookingStatus?: Resolver<ResolversTypes['Booking'], ParentType, ContextType, RequireFields<MutationupdateBookingStatusArgs, 'data'>>;
  updateListing?: Resolver<ResolversTypes['UpdateListingResponse'], ParentType, ContextType, RequireFields<MutationupdateListingArgs, 'data' | 'id'>>;
  updateOrganization?: Resolver<ResolversTypes['UpdateOrganizationResponse'], ParentType, ContextType, RequireFields<MutationupdateOrganizationArgs, 'data'>>;
  updateUser?: Resolver<ResolversTypes['UpdateUserResponse'], ParentType, ContextType, RequireFields<MutationupdateUserArgs, 'data'>>;
};

export type OrganizationResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Organization'] = ResolversParentTypes['Organization']> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  members?: Resolver<Array<ResolversTypes['Member']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PrivateUserResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['PrivateUser'] = ResolversParentTypes['PrivateUser']> = {
  allergies?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  canUpdateYear?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstLogin?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gradeYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  graduationYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  graduationYearUpdatedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  organizations?: Resolver<Array<ResolversTypes['Organization']>, ParentType, ContextType>;
  phoneNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PublicUserResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['PublicUser'] = ResolversParentTypes['PublicUser']> = {
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gradeYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  event?: Resolver<ResolversTypes['EventResponse'], ParentType, ContextType, RequireFields<QueryeventArgs, 'data'>>;
  events?: Resolver<ResolversTypes['EventsResponse'], ParentType, ContextType, Partial<QueryeventsArgs>>;
  listing?: Resolver<ResolversTypes['ListingResponse'], ParentType, ContextType, RequireFields<QuerylistingArgs, 'data'>>;
  listings?: Resolver<ResolversTypes['ListingsResponse'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['UserResponse'], ParentType, ContextType>;
  users?: Resolver<ResolversTypes['UsersResponse'], ParentType, ContextType>;
};

export type RemoveMemberResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['RemoveMemberResponse'] = ResolversParentTypes['RemoveMemberResponse']> = {
  member?: Resolver<ResolversTypes['Member'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RetractSignUpResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['RetractSignUpResponse'] = ResolversParentTypes['RetractSignUpResponse']> = {
  signUp?: Resolver<ResolversTypes['SignUp'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SignUpResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['SignUp'] = ResolversParentTypes['SignUp']> = {
  event?: Resolver<ResolversTypes['Event'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  participationStatus?: Resolver<ResolversTypes['ParticipationStatus'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['PublicUser'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SignUpResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['SignUpResponse'] = ResolversParentTypes['SignUpResponse']> = {
  signUp?: Resolver<ResolversTypes['SignUp'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateListingResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['UpdateListingResponse'] = ResolversParentTypes['UpdateListingResponse']> = {
  listing?: Resolver<ResolversTypes['Listing'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateOrganizationResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['UpdateOrganizationResponse'] = ResolversParentTypes['UpdateOrganizationResponse']> = {
  organization?: Resolver<ResolversTypes['Organization'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateUserResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['UpdateUserResponse'] = ResolversParentTypes['UpdateUserResponse']> = {
  user?: Resolver<ResolversTypes['PrivateUser'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['UserResponse'] = ResolversParentTypes['UserResponse']> = {
  user?: Resolver<Maybe<ResolversTypes['PrivateUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UsersResponseResolvers<ContextType = ApolloContext, ParentType extends ResolversParentTypes['UsersResponse'] = ResolversParentTypes['UsersResponse']> = {
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  users?: Resolver<Array<ResolversTypes['PrivateUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = ApolloContext> = {
  AddMemberResponse?: AddMemberResponseResolvers<ContextType>;
  Booking?: BookingResolvers<ContextType>;
  Cabin?: CabinResolvers<ContextType>;
  CreateEventResponse?: CreateEventResponseResolvers<ContextType>;
  CreateListingResponse?: CreateListingResponseResolvers<ContextType>;
  CreateOrganizationResponse?: CreateOrganizationResponseResolvers<ContextType>;
  DateTime?: GraphQLScalarType;
  DeleteListingResponse?: DeleteListingResponseResolvers<ContextType>;
  Event?: EventResolvers<ContextType>;
  EventResponse?: EventResponseResolvers<ContextType>;
  EventsResponse?: EventsResponseResolvers<ContextType>;
  Listing?: ListingResolvers<ContextType>;
  ListingResponse?: ListingResponseResolvers<ContextType>;
  ListingsResponse?: ListingsResponseResolvers<ContextType>;
  Member?: MemberResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Organization?: OrganizationResolvers<ContextType>;
  PrivateUser?: PrivateUserResolvers<ContextType>;
  PublicUser?: PublicUserResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  RemoveMemberResponse?: RemoveMemberResponseResolvers<ContextType>;
  RetractSignUpResponse?: RetractSignUpResponseResolvers<ContextType>;
  SignUp?: SignUpResolvers<ContextType>;
  SignUpResponse?: SignUpResponseResolvers<ContextType>;
  UpdateListingResponse?: UpdateListingResponseResolvers<ContextType>;
  UpdateOrganizationResponse?: UpdateOrganizationResponseResolvers<ContextType>;
  UpdateUserResponse?: UpdateUserResponseResolvers<ContextType>;
  UserResponse?: UserResponseResolvers<ContextType>;
  UsersResponse?: UsersResponseResolvers<ContextType>;
};

