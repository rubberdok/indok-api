type Event {
  id: ID!
  """
  The name of the event.
  """
  name: String!
  """
  The description of the event. We support markdown on the client, so this can be markdown.
  """
  description: String!
  """
  The start time of the event.
  """
  startAt: DateTime!
  """
  The end time of the event.
  """
  endAt: DateTime!
  """
  canSignUp is true if the current user can sign up for the event, false otherwise.
  If the user is not logged in, this will be always be false.
  """
  canSignUp: Boolean!
}

type EventsResponse {
  events: [Event!]!
}

type CreateEventResponse {
  event: Event!
}

input CreateEventInput {
  """
  The organization that is hosting the event. Events must be hosted by an organization, and the user
  creating the event must be a member of the organization.
  """
  organizationId: ID!
  event: EventData!
  signUpDetails: SignUpData
}

input SignUpData {
  """
  If true, users can sign up for the event. If false, users cannot sign up for the event.
  """
  enabled: Boolean!
  """
  The time that sign ups open for the event. This must be before the start time of the event.
  """
  signUpsStartAt: DateTime!
  """
  The time that sign ups close for the event. This must be after signUpsOpenAt.
  """
  signUpsEndAt: DateTime!
  """
  Total capacity for the event, regardless of the capacity in each slot.
  This number takes precedence over the capacity in each slot, so if the remaining capacity on the event is 0
  no more users can be registered as attending.
  """
  capacity: Int!
  """
  The slots for the event. If this is not provided, but capacity is, then all users can attend the event.
  """
  slots: [CreateEventSlot!]!
}

input EventData {
  """
  The name of the event, this will be displayed to users
  """
  name: String!
  """
  The description of the event, defaults to "". We support markdown on the client, so this can be markdown.
  This will be displayed to users.
  """
  description: String
  """
  The start time of the event. Events must have a start time.
  """
  startAt: DateTime!
  """
  The end time of the event. If this is not provided, the event will be assumed to be two hours long.
  This will be displayed to users.
  """
  endAt: DateTime
}

input CreateEventSlot {
  capacity: Int!
}

type EventResponse {
  event: Event!
}

input EventInput {
  id: ID!
}

type EventsResponse {
  """
  All events, if futureEventsOnly is false, otherwise only future events
  """
  events: [Event!]!
  """
  The events that start next week, by week number
  """
  nextWeek: [Event!]!
  """
  The events that start this week, by week number
  """
  thisWeek: [Event!]!
  """
  The events that start in two weeks or later, by week number
  """
  twoWeeksOrLater: [Event!]!
  """
  The total number of events returned by this query (for now)
  """
  total: Int!
}

input EventsInput {
  """
  If true, only return events that are currently happening, or will happen in the future
  i.e. events where endAt is in the future.
  """
  futureEventsOnly: Boolean
}

input SignUpInput {
  """
  The event to sign up for
  """
  eventId: ID!
}

enum ParticipationStatus {
  """
  The user is confirmed to be attending the event
  """
  CONFIRMED
  """
  The user has signed up for the event, and then retracted their sign up
  """
  RETRACTED
  """
  The user is on the wait list for the event
  """
  ON_WAITLIST
  """
  The user has signed up for the event, and had their sign up removed by an admin
  """
  REMOVED
}

type SignUp {
  id: ID!
  """
  The status of the user's participation in the event
  """
  participationStatus: ParticipationStatus!
  """
  The event the user signed up for
  """
  event: Event!
  """
  The user that signed up for the event
  """
  user: PublicUser!
}

type SignUpResponse {
  signUp: SignUp!
}

input RetractSignUpInput {
  """
  The event to retract the sign up for
  """
  eventId: ID!
}

type RetractSignUpResponse {
  signUp: SignUp!
}

type UpdateEventResponse {
  event: Event!
}

input UpdateEventInput {
  """
  The name of the event, this will be displayed to users
  """
  name: String
  """
  The description of the event, defaults to "". We support markdown on the client, so this can be markdown.
  This will be displayed to users.
  """
  description: String
  """
  The start time of the event. Must be before endAt and after the current time.
  """
  startAt: DateTime
  """
  The end time of the event, must be after startAt.
  """
  endAt: DateTime
  """
  Total capacity for the event, regardless of the capacity in each slot.
  This number takes precedence over the capacity in each slot, so if the remaining capacity on the event is 0
  no more users can be registered as attending. Cannot be less than the number of users currently signed up for the event.
  """
  capacity: Int
  """
  location of the event
  """
  location: String
}

type Mutation {
  """
  """
  updateEvent(id: ID!, data: UpdateEventInput!): UpdateEventResponse!
  """
  Retract an active sign up for an event, requires that the user is logged in
  """
  retractSignUp(data: RetractSignUpInput!): RetractSignUpResponse!
  """
  Sign up for an event, requires that the user is logged in
  """
  signUp(data: SignUpInput!): SignUpResponse!
  """
  Create an event, requires that the user is logged in, and is a member of the organization that is hosting the event
  """
  createEvent(data: CreateEventInput!): CreateEventResponse!
}

type Query {
  event(data: EventInput!): EventResponse!
  events(data: EventsInput): EventsResponse!
}
