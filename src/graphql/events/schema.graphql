type Event {
  id: ID!
  """
  The name of the event.
  """
  name: String!
  """
  The description of the event. We support markdown on the client, so this can be markdown.
  """
  description: String!
  """
  The start time of the event.
  """
  startAt: DateTime!
  """
  The end time of the event.
  """
  endAt: DateTime!
}

type EventsResponse {
  events: [Event!]!
}

type CreateEventResponse {
  event: Event!
}

input CreateEventInput {
  """
  The name of the event, this will be displayed to users
  """
  name: String!
  """
  The description of the event, defaults to "". We support markdown on the client, so this can be markdown.
  This will be displayed to users.
  """
  description: String
  """
  The organization that is hosting the event. Events must be hosted by an organization, and the user
  creating the event must be a member of the organization.
  """
  organizationId: ID!
  """
  The start time of the event. Events must have a start time.
  """
  startAt: DateTime!
  """
  The end time of the event. If this is not provided, the event will be assumed to be two hours long.
  This will be displayed to users.
  """
  endAt: DateTime
  """
  Total number of spots for the event, regardless of the number of spots in each slot.
  This number takes precedence over the spots in each slot, so if there are no spots remaining on the event
  no more users can be registered as attending.
  """
  spots: Int
  """
  The slots for the event. If this is not provided, but spots is, then all users can attend the event.
  """
  slots: [CreateEventSlot!]
}

input CreateEventSlot {
  spots: Int!
}

type EventResponse {
  event: Event!
}

input EventInput {
  id: ID!
}

type EventsResponse {
  """
  All events, if futureEventsOnly is false, otherwise only future events
  """
  events: [Event!]!
  """
  The events that start next week, by week number
  """
  nextWeek: [Event!]!
  """
  The events that start this week, by week number
  """
  thisWeek: [Event!]!
  """
  The events that start in two weeks or later, by week number
  """
  twoWeeksOrLater: [Event!]!
  """
  The total number of events returned by this query (for now)
  """
  total: Int!
}

input EventsInput {
  """
  If true, only return events that are currently happening, or will happen in the future
  i.e. events where endAt is in the future.
  """
  futureEventsOnly: Boolean
}

type Mutation {
  createEvent(data: CreateEventInput!): CreateEventResponse!
}

type Query {
  event(data: EventInput!): EventResponse!
  events(data: EventsInput): EventsResponse!
}
