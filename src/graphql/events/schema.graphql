type Event {
  id: ID!
  name: String!
  description: String!
}

type EventsResponse {
  events: [Event!]!
}

type CreateEventResponse {
  event: Event!
}

input CreateEventInput {
  name: String!
  description: String
  organizationId: ID!
  startAt: DateTime!
  endAt: DateTime
  spots: Int
  slots: [CreateEventSlot!]
}

input CreateEventSlot {
  spots: Int!
}

type EventResponse {
  event: Event!
}

input EventInput {
  id: ID!
}

type EventsResponse {
  events: [Event!]!
  nextWeek: [Event!]!
  thisWeek: [Event!]!
  twoWeeksOrLater: [Event!]!
  total: Int!
}

input EventsInput {
  futureEventsOnly: Boolean
}

type Mutation {
  createEvent(data: CreateEventInput!): CreateEventResponse!
}

type Query {
  event(data: EventInput!): EventResponse!
  events(data: EventsInput): EventsResponse!
}
